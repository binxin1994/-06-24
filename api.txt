文件说明：
     1.package.json 文件中含有npm 很多下载组件， 在新建文件中使用 npm install 可以下载所有组件--

  gulp组件：
	gulp.task('任务名',function(){}) // 创建任务。
 	- gulp.src('./*.css') 指定想要处理的文件
 	- gulp.dest() // 指定最终处理后的文件的存放路径
 	- gulp.watch() // 自动的监视文件的变化，然后执行相应任务。
 	- gulp.run('任务名')，直接执行相应的任务。
  例子如下：
	gulp.task('three',function () {
        gulp.src(['./app.js','./app1.js'])
        .pipe(cancat('hebing.js'))
        .pipe(gulp.dest('./dist'))
	})

  git 操作：
       
	git 分区：1.工作区 2.暂存区 3.版本库

       初始化文件：git init
     + 配置用户名:`git config --global user.name "xiaoming"`
     + 配置邮箱:  `git config --global user.email "xm@sina.com"`
     + 生成公钥,和私钥：+ `ssh-keygen -t rsa -C "xiaoming@sina.com"`

 1.把代码放到仓储的门口
    + `git add ./readme.md` 所指定的文件放到大门口
    + `git add ./` 把所有的修改的文件添加到大门口

 - 2.把仓储门口的代码放到里面的房间中去
    + `git commit -m "这是对这次添加的东西的说明" `

 ## 可以一次性把我们修改的代码放到房间里(版本库)

 - `git commit --all -m "一些说明"`
    + --all 表示是把所有修改的文件提交到版本库

 ## 查看当前的状态

 - 可以用来查看当前代码有没有被放到仓储中去
 - 命令: `git status`

## git中的忽略文件 

 .gitignore,在这个文件中可以设置要被忽略的文件或者目录。

 写法
        * ` /.idea  ` 会忽略.idea文件
        * ` /js`      会忽略js目录里的所有文件
        * ` /js/*.js` 会忽略js目录下所有js文件

## 查看日志
- `git log` 查看历史提交的日志
- `git log --oneline` 可以看到简洁版的日志

## 回退到指定的版本
- `git reset --hard Head~0`
    + 表示回退到上一次代码提交时的状态
- `git reset --hard Head~1`
    + 表示回退到上上次代码提交时的状态

- `git reset --hard [版本号]`
    + 可以通过版本号精确的回退到某一次提交时的状态

- `git reflog`
  + 可以看到每一次切换版本的记录:可以看到所有提交的版本号

## 分支
- 默认是有一个主分支master

### 创建分支
- `git branch dev`
    + 创建了一个dev分支
    + 在刚创建时dev分支里的东西和master分支里的东西是一样的

### 切换分支
- `git checkout dev`
    + 切换到指定的分支,这里的切换到名为dev的分支
    `git branch` 可以查看当前有哪些分支


### 合并分支
- `git merge dev`
    + 合并分支内容,把当前分支与指定的分支(dev),进行合并
    + 当前分支指的是`git branch`命令输出的前面有*号的分支
- 合并时如果有冲突，需要手动去处理，处理后还需要再提交一次.


### 提交代码到github(当作git服务器来用)
- `git push [地址] master`
 + 示例: `git push https://github.com/huoqishi/test112.git master  master`
 + 会把当前分支的内容上传到远程的master分支上

- `git pull [地址] master`
 + 示例: `git pull https://github.com/huoqishi/test112.git master`
 + 会把远程分支的数据得到:(*注意本地-要初始一个仓储!*)

- `git clone [地址]`
 + 会得到远程仓储相同的数据,如果多次执行会覆盖本地内容。


     重点简写方式

pull和push的简写方式:
修改命令:
	第一步: git remote add origin 仓库地址
			(解决绑定地址问题，origin可随意，相当于将仓库地址赋值给origin变量)
	第二步:git push -u master 分支名
		   (-u参数，解决origin 分支名 简写问题，这样绑定了master)
备注：只针对当前目录
简写为:
	第一步简写为:git push origin 分支名
	最后简写为:git push
备注:pull类似

1. git remote add origin git@github.com:binxin1994/heime.git（远程代码库地址）
2.git push origin master
3.git push
4.






















































